//
// Copyright 2013 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <thread>
#include <memory>
#include <functional>
#include <boost/asio.hpp>
#include <boost/date_time.hpp>

#include "embxx/util/EventLoop.h"
#include "embxx/driver/TimerMgr.h"
#include "cxxtest/TestSuite.h"

#include "module/device/test/EventLoopLock.h"
#include "module/device/test/EventLoopCond.h"
#include "module/device/test/TimerDevice.h"

class TimerMgrTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();

private:

    template <typename TEventLoop,
              typename TTimer,
              typename TDuration>
    void incWaitFunc(
        TEventLoop& el,
        TTimer& timer,
        unsigned& counter,
        unsigned maxCounter,
        const TDuration& waitTime,
        bool stopAtEnd = true)
    {
        if (maxCounter <= counter) {
            if (stopAtEnd) {
                el.stop();
            }
            return;
        }

        ++counter;
        timer.asyncWait(
            waitTime,
            [this, &el, &timer, &counter, maxCounter, waitTime, stopAtEnd](const embxx::error::ErrorStatus& status)
            {
                if (status.code() == embxx::error::ErrorCode::Aborted) {
                    return;
                }

                TS_ASSERT(!status);
                incWaitFunc(el, timer, counter, maxCounter, waitTime, stopAtEnd);
            });
    }

    template <typename TEventLoop,
              typename TTimer,
              typename TDuration>
    void cancelOtherFunc(
        TEventLoop& el,
        TTimer& timer1,
        TTimer& timer2,
        unsigned& counter,
        unsigned maxCounter,
        const TDuration& waitTime)
    {
        if (maxCounter <= counter) {
            el.stop();
            return;
        }

        ++counter;
        timer2.asyncWait(
            waitTime + TDuration(50),
            [](const embxx::error::ErrorStatus& status)
            {
                TS_ASSERT_EQUALS(status.code(), embxx::error::ErrorCode::Aborted);
            });

        timer1.asyncWait(
            waitTime,
            [this, &el, &timer1, &timer2, &counter, maxCounter, waitTime](const embxx::error::ErrorStatus& status)
            {
                if (status.code() == embxx::error::ErrorCode::Aborted) {
                    return;
                }

                timer2.cancel();
                cancelOtherFunc(el, timer1, timer2, counter, maxCounter, waitTime);
            });
    }
};

constexpr uint32_t STATIC_FUNCTION_SIZE = 10;

void TimerMgrTestSuite::test1()
{
    typedef embxx::util::EventLoop<
        132,
        embxx::device::test::EventLoopLock,
        embxx::device::test::EventLoopCond> EventLoop;

    typedef embxx::device::test::TimerDevice<EventLoop::LockType> TimerDevice;

    EventLoop el;
    TimerDevice timerDevice(el.getLock());

    typedef embxx::driver::TimerMgr<
        TimerDevice,
        EventLoop,
        1,
        embxx::util::StaticFunction<void (const embxx::error::ErrorStatus&), sizeof(void*) * STATIC_FUNCTION_SIZE> > TimerMgr;
    TimerMgr timerMgr(timerDevice, el);
    auto timer = timerMgr.allocTimer();
    TS_ASSERT(timer.isValid());
    auto invalidTimer = timerMgr.allocTimer();
    TS_ASSERT(!invalidTimer.isValid());
    unsigned counter = 0;
    static const unsigned MaxCounter = 10;
    static const auto Delay = std::chrono::milliseconds(200);
    incWaitFunc(el, timer, counter, MaxCounter, Delay);
    el.run();
}

void TimerMgrTestSuite::test2()
{
    typedef embxx::util::EventLoop<
        sizeof(void*) * 33,
        embxx::device::test::EventLoopLock,
        embxx::device::test::EventLoopCond> EventLoop;

    typedef embxx::device::test::TimerDevice<EventLoop::LockType> TimerDevice;

    EventLoop el;
    TimerDevice timerDevice(el.getLock());

    typedef embxx::driver::TimerMgr<
        TimerDevice,
        EventLoop,
        2,
        embxx::util::StaticFunction<void (const embxx::error::ErrorStatus&), sizeof(void*) * STATIC_FUNCTION_SIZE> > TimerMgr;
    TimerMgr timerMgr(timerDevice, el);


    auto timer1 = timerMgr.allocTimer();
    TS_ASSERT(timer1.isValid());
    auto timer2 = timerMgr.allocTimer();
    TS_ASSERT(timer2.isValid());
    unsigned counter = 0;
    static const unsigned MaxCounter = 20;
    static const auto Delay = std::chrono::milliseconds(100);
    cancelOtherFunc(el, timer1, timer2, counter, MaxCounter, Delay);
    el.run();
}

void TimerMgrTestSuite::test3()
{
    typedef embxx::util::EventLoop<
        1024,
        embxx::device::test::EventLoopLock,
        embxx::device::test::EventLoopCond> EventLoop;

    typedef embxx::device::test::TimerDevice<EventLoop::LockType> TimerDevice;

    EventLoop el;
    TimerDevice timerDevice(el.getLock());
    static const unsigned TotalTimers = 10;

    typedef embxx::driver::TimerMgr<
        TimerDevice,
        EventLoop,
        TotalTimers,
        embxx::util::StaticFunction<void (const embxx::error::ErrorStatus&), sizeof(void*) * STATIC_FUNCTION_SIZE> > TimerMgr;
    typedef TimerMgr::Timer Timer;

    TimerMgr timerMgr(timerDevice, el);
    std::array<Timer, TotalTimers> timers;
    std::array<unsigned, TotalTimers> counters;

    static const unsigned MaxCounter = 20;
    static const auto Delay = std::chrono::milliseconds(50);
    for (unsigned i = 0; i < TotalTimers; ++i) {
        timers[i] = timerMgr.allocTimer();
        TS_ASSERT(timers[i].isValid());
        counters[i] = 0;

        bool stopAtEnd = (i == (TotalTimers - 1));
        typedef decltype(Delay) DelayType;
        incWaitFunc(el, timers[i], counters[i], MaxCounter, Delay + DelayType(i * 10), stopAtEnd);
    }
    el.run();
    for (unsigned i = 0; i < TotalTimers; ++i) {
        TS_ASSERT(counters[i] == MaxCounter);
    }

}
