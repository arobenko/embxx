//
// Copyright 2013 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <cstdint>
#include <cstddef>
#include <memory>
#include <iterator>

#include "embxx/util/assert/CxxTestAssert.h"
#include "cxxtest/TestSuite.h"
#include "CommsTestCommon.h"


class MessageTestSuite : public CxxTest::TestSuite,
                         public embxx::util::EnableAssert<embxx::util::assert::CxxTestAssert>
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();

private:

    template <template<class> class TMessage, typename TTraits>
    TMessage<TTraits> internalReadWriteTest(
        const std::uint8_t* const buf,
        std::size_t bufSize,
        embxx::comms::ErrorStatus expectedErrStatus);

    template <template<class> class TMessage, typename TTraits>
    void internalWriteReadTest(
        const TMessage<TTraits>& msg,
        std::uint8_t* const buf,
        std::size_t bufSize,
        embxx::comms::ErrorStatus expectedErrStatus);


    struct BigEndianTraits {
        typedef embxx::comms::traits::endian::Big Endianness;
        typedef const std::uint8_t* ReadIterator;
        typedef std::uint8_t* WriteIterator;
    };

    struct LittleEndianTraits {
        typedef embxx::comms::traits::endian::Little Endianness;
        typedef const std::uint8_t* ReadIterator;
        typedef std::uint8_t* WriteIterator;
    };
};

void MessageTestSuite::test1()
{
    const std::uint8_t buf[] = {
        0x01, 0x02
    };

    auto beMsg =
        internalReadWriteTest<Message1, BigEndianTraits>(
            buf,
            sizeof(buf)/sizeof(buf[0]),
            embxx::comms::ErrorStatus::Success);

    TS_ASSERT_EQUALS(beMsg.getValue(), 0x0102);

    auto leMsg =
        internalReadWriteTest<Message1, LittleEndianTraits>(
            buf,
            sizeof(buf)/sizeof(buf[0]),
            embxx::comms::ErrorStatus::Success);

    TS_ASSERT_EQUALS(leMsg.getValue(), 0x0201);
}

void MessageTestSuite::test2()
{
    const std::uint8_t expectecedBeBuf[] = {
        0x01, 0x02
    };

    Message1<BigEndianTraits> beMsg;
    beMsg.setValue(0x0102);
    std::uint8_t beBuf[2] = {0};
    internalWriteReadTest(beMsg, beBuf, sizeof(beBuf)/sizeof(beBuf[0]), embxx::comms::ErrorStatus::Success);
    TS_ASSERT(std::equal(&expectecedBeBuf[0], &expectecedBeBuf[0] + sizeof(beBuf)/sizeof(beBuf[0]), &beBuf[0]));

    const std::uint8_t expectecedLeBuf[] = {
        0x02, 0x01
    };
    Message1<LittleEndianTraits> leMsg;
    leMsg.setValue(0x0102);
    std::uint8_t leBuf[2] = {0};
    internalWriteReadTest(leMsg, leBuf, sizeof(leBuf)/sizeof(leBuf[0]), embxx::comms::ErrorStatus::Success);
    TS_ASSERT(std::equal(&expectecedLeBuf[0], &expectecedLeBuf[0] + sizeof(leBuf)/sizeof(leBuf[0]), &leBuf[0]));
}

void MessageTestSuite::test3()
{
    const std::uint8_t buf[] = {
        0x01
    };

    auto beMsg =
        internalReadWriteTest<Message1, BigEndianTraits>(
            buf,
            sizeof(buf)/sizeof(buf[0]),
            embxx::comms::ErrorStatus::NotEnoughData);

    auto leMsg =
        internalReadWriteTest<Message1, LittleEndianTraits>(
            buf,
            sizeof(buf)/sizeof(buf[0]),
            embxx::comms::ErrorStatus::NotEnoughData);
}

void MessageTestSuite::test4()
{
    std::uint8_t buf[1] = {0};

    Message1<BigEndianTraits> beMsg;
    beMsg.setValue(0x0102);
    internalWriteReadTest(beMsg, buf, sizeof(buf)/sizeof(buf[0]), embxx::comms::ErrorStatus::BufferOverflow);

    Message1<LittleEndianTraits> leMsg;
    leMsg.setValue(0x0102);
    internalWriteReadTest(leMsg, buf, sizeof(buf)/sizeof(buf[0]), embxx::comms::ErrorStatus::BufferOverflow);
}

void MessageTestSuite::test5()
{
    const std::uint8_t buf[] = {
        0x01, 0x02, 0x3, 0x4, (std::uint8_t)-5, 0xde, 0xad, 0x00, 0xaa, 0xff
    };

    auto beMsg =
        internalReadWriteTest<Message3, BigEndianTraits>(
            buf,
            sizeof(buf)/sizeof(buf[0]),
            embxx::comms::ErrorStatus::Success);

    TS_ASSERT_EQUALS(std::get<0>(beMsg.getFields()).getValue(), 0x01020304);
    TS_ASSERT_EQUALS(std::get<1>(beMsg.getFields()).getValue(), -5);
    TS_ASSERT_EQUALS(std::get<2>(beMsg.getFields()).getValue(), 0xdead);
    TS_ASSERT_EQUALS(std::get<3>(beMsg.getFields()).getValue(), 0xaaff);
    TS_ASSERT_EQUALS(beMsg.length(), 10U);

    auto leMsg =
        internalReadWriteTest<Message3, LittleEndianTraits>(
            buf,
            sizeof(buf)/sizeof(buf[0]),
            embxx::comms::ErrorStatus::Success);

    TS_ASSERT_EQUALS(std::get<0>(leMsg.getFields()).getValue(), 0x04030201);
    TS_ASSERT_EQUALS(std::get<1>(leMsg.getFields()).getValue(), -5);
    TS_ASSERT_EQUALS(std::get<2>(leMsg.getFields()).getValue(), 0xadde);
    TS_ASSERT_EQUALS(std::get<3>(leMsg.getFields()).getValue(), 0xffaa00);
    TS_ASSERT_EQUALS(leMsg.length(), 10U);
}

void MessageTestSuite::test6()
{
    std::uint8_t buf[4] = {0};

    Message3<BigEndianTraits> beMsg;
    internalWriteReadTest(beMsg, buf, sizeof(buf)/sizeof(buf[0]), embxx::comms::ErrorStatus::BufferOverflow);

    Message3<LittleEndianTraits> leMsg;
    internalWriteReadTest(leMsg, buf, sizeof(buf)/sizeof(buf[0]), embxx::comms::ErrorStatus::BufferOverflow);
}


template <template<class> class TMessage, typename TTraits>
TMessage<TTraits> MessageTestSuite::internalReadWriteTest(
    const std::uint8_t* const buf,
    std::size_t bufSize,
    embxx::comms::ErrorStatus expectedErrStatus)
{
    typedef TTraits Traits;
    typedef TMessage<Traits> TestMsg;
    TestMsg msg;

    auto readIter = buf;
    embxx::comms::ErrorStatus es = msg.read(readIter, bufSize);
    TS_ASSERT_EQUALS(es, expectedErrStatus);

    if (es == embxx::comms::ErrorStatus::Success) {
        auto diff = static_cast<unsigned>(std::distance(buf, readIter));
        TS_ASSERT_LESS_THAN(0, diff);
        std::unique_ptr<std::uint8_t[]> outDataBuf(new std::uint8_t[diff]);
        auto writeIter = &outDataBuf[0];
        auto writeES = msg.write(writeIter, diff);
        TS_ASSERT_EQUALS(writeES, embxx::comms::ErrorStatus::Success);
        TS_ASSERT(std::equal(buf, buf + diff, &outDataBuf[0]));
    }
    return msg;
}


template <template<class> class TMessage, typename TTraits>
void MessageTestSuite::internalWriteReadTest(
    const TMessage<TTraits>& msg,
    std::uint8_t* const buf,
    std::size_t bufSize,
    embxx::comms::ErrorStatus expectedErrStatus)
{
    auto writeIter = buf;
    embxx::comms::ErrorStatus es = msg.write(writeIter, bufSize);
    TS_ASSERT_EQUALS(es, expectedErrStatus);

    if (es == embxx::comms::ErrorStatus::Success) {
        auto diff = static_cast<std::size_t>(std::distance(buf, writeIter));
        TMessage<TTraits> readMsg;
        auto readIter = static_cast<const std::uint8_t*>(buf);
        auto readES = readMsg.read(readIter, diff);
        TS_ASSERT_EQUALS(readES, embxx::comms::ErrorStatus::Success);
        TS_ASSERT_EQUALS(msg, readMsg);
    }
}

